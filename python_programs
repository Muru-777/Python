Python programs:

Reverse only letters in word

Sentence = "EyeHunts for student"

for i in Sentence.split(" "):
   rev = "".join(i[::-1])
   print(rev, end=" ")

Output:  stnuHeyE rof tneduts

Reverse a string

Sentence = "EyeHunts for student"

rev = Sentence[::-1]
print(rev, end=" ")

Output: tneduts rof stnuHeyE 


a = "murugavel is good boy"

for i in a.split():
  j = i[::-1]
  print(j, end=' ')

Output: levagurum si good yob 

thisdict = {
  "brand": "Ford",
  "electric": False,
  "year": 1964,
  "colors": ["red", "white", "blue"]
}

thisdict["model"] = "old"

if "ford" in thisdict.values():
	print("yes")
X	
for i in thisdict:
	print(i, thisdict[i])
    
for i in thisdict.values():
	print(i)
    
for x, y in thisdict.items():
    print(x,y)

new_dict = dict(thisdict)
print(new_dict)


Extend, append, insert, format, pop,remove, del, split, strip, count, clear

Prime number:

1. lower_value = int(input ("Please, Enter the Lowest Range Value: "))  
2. upper_value = int(input ("Please, Enter the Upper Range Value: "))  
3.   
4. print ("The Prime Numbers in the range are: ")  
5. for number in range (lower_value, upper_value + 1):  
6.     if number > 1:  
7.         for i in range (2, number):  
8.             if (number % i) == 0:  
9.                 break  
10.         else:  
11.             print (number)  

SORTING:

my_list = [4, 2, 3, -1, -2, 0, 1]

for i in range(len(my_list)):
    for j in range(i + 1, len(my_list)):

        if my_list[i] > my_list[j]:
            my_list[i], my_list[j] = my_list[j], my_list[i]

print(my_list)


NESED DICTIONARIES:

# A Nested dictionary i.e. dictionaty of dictionaries
students = {
            'ID 1':    {'Name': 'Shaun', 'Age': 35, 'City': 'Delhi'},
            'ID 2':    {'Name': 'Ritika', 'Age': 31, 'City': 'Mumbai'},
            'ID 3':    {'Name': 'Smriti', 'Age': 33, 'City': 'Sydney'},
            'ID 4':    {'Name': 'Jacob', 'Age': 23, 'City': {'perm': 'Tokyo',
                                                             'current': 'London'}},
            }
def nested_dict_pairs_iterator(dict_obj):
    ''' This function accepts a nested dictionary as argument
        and iterate over all values of nested dictionaries
    '''
    # Iterate over all key-value pairs of dict argument
    for key, value in dict_obj.items():
        # Check if value is of dict type
        if is-instance(value, dict):
            # If value is dict then iterate over all its values
            for pair in  nested_dict_pairs_iterator(value):
                yield (key, *pair)
        else:
            # If value is not dict type then yield the value
            yield (key, value)
#Loop through all key-value pairs of a nested dictionary
for pair in nested_dict_pairs_iterator(students):
    print(pair)

Maximum possibilities of cat are:

test_str = "cagscasttaa gdcas sdc"

c, a, t, s = 0, 0, 0, 0
  
for i in test_str:
    if i == 'c':
       c = c + 1
    if i == 'a':
       a = a + 1
    if i == 't':
       t = t + 1
    if i == 's':
       s = s + 1
   
number = (c, a, t, s)
p = (min(number))

print("maximum possibilities of cats are", p)

l, u, d, s = 0, 0, 0, 0

pd = "Ram3456"

if len(pd) >= 8:
  for i in pd:
    if i.islower():
      l += 1
    if i.isupper():
      u += 1
    if i.isdigit():
      d += 1
    if (i == "_" or i == "@" or i == "$"):
      s += 1
if (l >= 1 and u >= 1 and d >= 1 and s >= 1 and l+u+d+s == len(pd)):
    
    print("valid password") 
    
else:
   print("password is not valid")


Extend, append, insert, format, pop,remove, del, split, strip, count, clear
